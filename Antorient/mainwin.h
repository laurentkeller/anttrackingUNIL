/*
 *  mainwine.h
 *  
 *
 *  Created by Danielle Mersch and Alessandro Crespi.
 *  Copyright UNIL and Alessandro Crespi. All rights reserved.
 *
 */

#ifndef __mainwin__
#define __mainwin__

/**
@file
Subclass of MainWinGui, which is generated by wxFormBuilder.
* MainWin implements the graphic interface of antorient with methods to 
* measure the size of the ants, measure the angle of the tag on the ant, etc.
*
*/
#include <wx/wx.h>
#include <wx/imaglist.h>
#include <wx/msgdlg.h>
#include <wx/ffile.h>
#include "antorient.h"
#include "trackcvt.h"
#include "tags3.h"
#include "datfile.h"
#include <cmath>
#include "datcorrwin.h"
#include "progressbarwin.h"
#include "utils.h"

// Infos sur un tag (statistiques et rotation)
struct tag_info_2 {
  unsigned long count;
  signed short rot;
  bool mod;
};


struct calibration_parameters{
  double displacement_distance; // distance between original tag position and desired, adjusted tag position
  double trapezoid_length; // distance between antennal reach and gaster tip; will be used to define the trapezoid later
  double displacement_angle; //angle (in degrees) between original tag angle and direction in which we want to displace the tag
  double orientation_angle; //angle (in degrees) between original tag angle and actual ant orientation
  double corrected_antenna_reach; //distance between corrected, desired tag center and antenna reach
  // indicate here all the variables for the parameters you want to store in the tags file
};

class MainWin : public MainWinGui{

public:
/** \brief Constructor of the window of antorient
 * \param  parent Window
 */
  MainWin( wxWindow* parent );
/// destructor
  ~MainWin();

protected:
	
/**\brief Loads the dat file containing the tracing data
 * \param event Event from the user to open the file
 * \return void
 */
  void load_tracking_file( wxCommandEvent& event );
	
/**\brief Loads the image 
 * \param event Event from the user to open an image
 * \return void
 */
  void load_frame_bitmap( wxCommandEvent& event );
	
/** \brief Loads the tags file
 * \param event Event from the user to open a tags file
 * \return void
 */
  void load_rotation_data( wxCommandEvent& event );
	
/**\brief Saves the corrections in a tags file
 * \param event Event to save data triggered by the user
 * \return void
 */
  void save_rotation_data( wxCommandEvent& event );
	
/**\brief Closes the antorient application
 * \param event Event to close application triggered by user
 * \return void
 */
  void exit_application( wxCommandEvent& event );
	
/**\brief Draws the bitmap image with the overlay
 * \param event Event to redraw the image
 * \return void
 */
  void draw_bitmap( wxPaintEvent& event );
	
/**\brief Applies an 90 degree angle change to the selected tag
 * \param event Event to change the angle by 90 degrees triggered by the user
 * \return void
 */
  void rotate_btn( wxCommandEvent& event );
	
/**\brief Retrieves the new gamma correction coefficient
 * \param event Event to change the gamma correction coefficient triggered by user
 * \return void
 */
  void set_gamma( wxScrollEvent& event );
	
/**\brief Updates the tag information based on the line selected in the list by the user 
 * \param event Event to change the tag triggered by the user
 * \return void
 */
  void update_selected_tag( wxListEvent& event );
	
/**\brief Changes the type of the ant
 * \param event Event to define the type of the ant triggered by the user
 * \return void
 */
  void change_type( wxCommandEvent& event );
	
/**\brief Vetos the resize attemps on the image by the user
 * \param event Event triggered by user trying to resize the image
 * \return void
 */
  void anti_resize( wxListEvent& event );
	
/**\brief Activates the ruler and changes the cursor on the image
 * \param event Event to see the ruler triggered by the user
 * \return void
 */
  void show_ruler( wxMouseEvent& event );
	
/**\brief Marks the position of the first point of the ruler and the position to the radius
 * \param event Event to mark the first ruler or the radius point triggered by the user clicking on the image
 * \return void
 */
  void mark( wxMouseEvent& event );
	
/**\brief Updates the ruler state depending on the previous state
 * \param event Event triggered by the user clicking on the ruler button
 * \return void
 */
  void ruler( wxCommandEvent& event );
	
/**\brief Resets the size of the ant to 0
 * \param event Command event to react to the choices of the user
 * \return void
 */
  void reset_size( wxCommandEvent& event );
	
/**\brief Set the radius 
 * \param event Event to define the radius triggered by the user clicking in the image
 * \return void
 */
  void set_rayon( wxCommandEvent& event );
	
/**\brief Resets the radius of the ant to zero
 * \param  event Event to reset the radius triggered by user
 * \return void
 */
  void reset_rayon( wxCommandEvent& event );
	
	/**\brief Set the headwidth of the ant 
 * \param event Event to define the headwidth triggered by the user clicking in the image
 * \return void
 */
	void reset_headwidth( wxCommandEvent& event );
	
	/**\brief Resets the headwidth of the ant to zero
 * \param  event Event to reset the headwidth triggered by user
 * \return void
 */
	void set_headwidth( wxCommandEvent& event );
	
  /**\brief Sets the tailreach of the ant 
   * \param  event Event to set the tail reach triggered by user
   * \return void
   */
  void set_tail( wxCommandEvent& event);
  
  /**\brief Resets the tail reach of the ant to zero
   * \param  event Event to reset the tail reach triggered by user
   * \return void
   */
  void reset_tail( wxCommandEvent& event);

/**\brief Updates the controls depending on the state of the program: (in)activates various fields
 * \return void
 */
  void update_controls();
	
/**\brief Applies the rotation change to the angles of tags in the dat file
 * \param  event Event to apply the rotation angle to dat file triggered by user
 * \return void
 */
	void select_datfile( wxCommandEvent& event );

private:

/**\brief Updates the list of tags visible in the image
 * \return void
 */
	void update_tags();
	
/**\brief Updates the image segment shown in antorient with the overlay
 * \return void
 */
  void update_tag_image();
	
/**\brief Loads the data of the current frame from the dat file
 * \return void
 */
  void load_current_frame();
	
/**\brief Fills the look-up table (LUT) with the gamma correction values
 * \param gc Gamma correction coefficient
 * \return void
 */
  void init_gamma(double gc);
	
/**\brief Applies a gamma correction to the image (using a precalculat look-up table LUT)
 * \param img Image which will be gamma corrected
 * \return void
 */
  void apply_gamma(wxImage& bmp);
	
/**\brief Updates the image for a newly selected tag
 * \return void
 */
  void update_selected_tag_image();

  DatFile* dat;							///< file with tracking data
  int framenum;              ///< number of current frame
  framerec fdata;            ///< data of current frame
  bool tag_mod[tag_count];   /// table with true-false value for modified tags (true is tag modified)
  wxImage* image;            ///< high resolution image loaded
  bool draw_overlay;         ///< affiche les infos par dessus l'image
  wxString overlay_text;     ///< overlaid text on image
  double overlay_orient;     ///< orientation of the tag
  unsigned char gamma[256];  // LUT (LookUp-Table) pour le gamma
  int disp_tag_idx;          // tag affiché (pos dans liste), -1 si aucun
  int sel_tag_idx;           // tag sélectionné dans la liste
  TagsFile* tgs;             ///< information on tags
  wxImageList* img_liste;
  
  
  bool stateS;							//< state of antenna reach: off(false), on(true)
  wxPoint coor3;						//< position for antenna reach
  
  bool stateT;              //< state of tail reach: off(false), on (true)
  wxPoint coor6;						//< position for tail reach
  
  int stateR;								//< state of ruler: off(0), first point (1), second point (2)
  wxPoint coor1;						//< first coordinate for ant size
  wxPoint coor2;						//< second coordinate for ant size
  double size;							//< size of the ant
  
  int stateH;								//< state of headwidth: off(0), first point (1), second point (2)
	wxPoint coor4;						//< 1st coordinate for headwidth
  wxPoint coor5;            //< 2nd coordinate for headwidth
  
  wxPoint tag_position;			//< position of the tag in the small image (x=y=HALF_SMALL_SIZE if not close to borders)
	wxString tagsfile;				//< path of .tags file
	wxString datfile;					//< path of .dat file
	bool modified;		//< state of tag data: true if a tag had been modified, false otherwise
	bool saved;				//< state of tag changes: true if the changes were saved, false otherwise
  
  calibration_parameters param[tag_count]; //< parameters for calibration, a set for each ant
  bool calibration;   ///< true of both calibration parameters (antenna and tail reach) are known, false otherwise 
};

#endif // __mainwin__

