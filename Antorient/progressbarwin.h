/*
 *  progressbarwin.h
 *  
 *
 *  Created by Danielle Mersch.
 *  Copyright UNIL. All rights reserved.
 *
 */

#ifndef __progressbarwin__
#define __progressbarwin__

/**
@file
Subclass of ProgressbarWindow, which is generated by wxFormBuilder.
* implements the progressbar shown while datcorr is running
*/

#include <wx/msgdlg.h>
#include <iostream>
#include "wx_progressbar.h"
#include <wx/thread.h>
#include <wx/timer.h>

using namespace std;

const int TIMER_ID = 500;

/** Implementing ProgressbarWindow */
class ProgressbarWin : public ProgressbarWindow{

public:
	/**\brief Constructor starts the timer and assigns the files names to the attribute
	 * \param parent Window for progression bar
	 * \param dat Dat file path
	 * \param tags Tags file path
	 * \param outf Output path
	 */
	ProgressbarWin( wxWindow* parent, wxString dat, wxString tags, wxString outf, wxString logf);
	
	///destructor
	~ProgressbarWin();
	
	// Public method called from the thread to update the window
	void set_gauge(int i);
	
	/** \brief Called by thread just before ending, ends the modal dialog
	 * \return void
	 */
	void thread_ended();
	

protected:
	// Handlers for ProgressbarWindow events.
	
	/** \brief Inits the dialog window (called before the dialog is displayed)
	 * \param event Event trigged by the user when requesting the dialog to open
	 * \return void
	 */
	void initdlg( wxInitDialogEvent& event );
	
	/**\brief Close event handler (don't allow window close)
	 * \param event Event triggered when the user tries close the progression bar
	 * \return void
	 */
	void closer( wxCloseEvent& event );
	
	/**\brief Static method used as callback to update the gauge from the processing
	 * \param percent Position of the gauge to be set 
   * \param instance A pointer to the instance of the window (passed as parameter to execute_datcorr())
	 * \return void
	 */
	static void update_callback(int percent, void* instance);

private:

	/**\brief Updated at regulate intervals the progression of the progressbar
	 * \param event Event called every TIMER_ID intervals triggered by system
	 * \return void
	 */
	void OnTimer(wxTimerEvent& event);
	
	wxThread* datcorr_thread;  ///< should be DatcorrThread but this would generate an infinite inclusion loop
	wxString datfile; ///< datfile for datcorr
	wxString tagsfile; ///< tagsfile for datcorr
	wxString output;  ///< output file for datcorr
	wxString logfile; ///< postprocessing logfile
	wxTimer timer;  ///< timer
	int gauge_position; ///< position of the progression bar
	bool finished; ///< status of the progression bar true is finished
	
	DECLARE_EVENT_TABLE()  //< Event table containing calls to methods, the calls are triggered by the system
};

#endif // __progressbarwin__
